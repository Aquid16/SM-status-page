name: Status Page CI Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - Development
    paths:
      - 'docker/**'
jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Set Up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: latest

    - name: Check Terraform version
      run: terraform version

    - name: Create terraform.tfvars file
      run: |
        cat <<EOF > terraform/statuspage_pr/terraform.tfvars
        aws_access_key = "${{ secrets.AWS_ACCESS_KEY_ID }}"
        aws_secret_key = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        aws_region     = "${{ secrets.AWS_DEFAULT_REGION }}"
        EOF

    - name: Initialize Terraform
      run: cd ./terraform/statuspage_pr && terraform init

    - name: Plan Terraform
      run: |
        cd ./terraform/statuspage_pr
        terraform plan -out=tfplan 

    - name: Apply Terraform
      run: |
        cd ./terraform/statuspage_pr
        terraform apply -auto-approve -input=false 

    - name: Get Terraform Outputs
      run: |
        cd ./terraform/statuspage_pr
        RDS_ENDPOINT=$(terraform output -raw rds_endpoint | tr -d '\n' | tr -d '\r')
        EFS_FILESYSTEM_ID=$(terraform output -raw efs_filesystem_id | tr -d '\n' | tr -d '\r')
    
        echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV
        echo "EFS_FILESYSTEM_ID=$EFS_FILESYSTEM_ID" >> $GITHUB_ENV

    - name: Install AWS CLI & kubectl
      run: |
        # Update apt package lists
        sudo apt-get update
        set -e 

        # Install AWS CLI
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        aws --version

        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        kubectl version --client

    - name: Configure AWS Credentials
      run: |
        export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        export AWS_REGION=${{ secrets.AWS_DEFAULT_REGION }}
        aws sts get-caller-identity

    - name: Configure kubeconfig
      run: aws eks update-kubeconfig --region ${{ secrets.AWS_DEFAULT_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}


    - name: Get ALB hostname
      run: |
        ALB_HOSTNAME=$(kubectl get ingress -n development statuspage-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "ALB_HOSTNAME=$ALB_HOSTNAME" >> $GITHUB_ENV

    - name: Add A Record (Alias) to Route 53
      run: |
        cat <<EOF > dns-record.json
        {
          "Comment": "Adding statuspage A record with alias",
          "Changes": [{
            "Action": "UPSERT",
            "ResourceRecordSet": {
              "Name": ${{ secrets.HOSTED_ZONE_NAME }},
              "Type": "A",
              "AliasTarget": {
                "HostedZoneId": ${{ secrets.HOSTED_ZONE_ID }},
                "DNSName": "$ALB_HOSTNAME",
                "EvaluateTargetHealth": false
              }
            }
          }]
        }
        EOF
        aws route53 change-resource-record-sets --hosted-zone-id ${{ secrets.HOSTED_ZONE_ID }} --change-batch file://dns-record.json

    - name: Test connectivity to subpaths
      env:
        USERNAME: ${{ secrets.TEST_USERNAME }}
        PASSWORD: ${{ secrets.TEST_PASSWORD }}
      run: |
        echo "Waiting for environment to stabilize..." \
        sleep 180 \
        chmod +x test/test-connectivity.sh \
        ./test/test-connectivity.sh 

    - name: Remove A Record (Alias) from Route 53
      run: |
        cat <<EOF > dns-record.json
        {
          "Comment": "Removing statuspage A record",
          "Changes": [{
            "Action": "DELETE",
            "ResourceRecordSet": {
              "Name": ${{ secrets.HOSTED_ZONE_NAME }},
              "Type": "A",
              "AliasTarget": {
                "HostedZoneId": ${{ secrets.HOSTED_ZONE_ID }},
                "DNSName": "$ALB_HOSTNAME",
                "EvaluateTargetHealth": false
              }
            }
          }]
        }
        EOF
        aws route53 change-resource-record-sets --hosted-zone-id ${{ secrets.HOSTED_ZONE_ID }} --change-batch file://dns-record.json
        
    - name: Destroy Terraform
      run: |
        cd ./terraform/statuspage_pr
        terraform destroy -auto-approve -input=false 

    # - name: Trigger CD
    #   run: |
    #     curl -X POST \
    #     -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
    #     -H "Accept: application/vnd.github.v3+json" \
    #     -d '{"ref":"main"}' \
    #     https://api.github.com/repos/${{ github.repository }}/actions/workflows/status-page-cd.yml/dispatches
