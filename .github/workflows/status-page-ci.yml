name: Status Page CI Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - Development
    paths:
      - 'docker/**'
      - 'terraform/statuspage_pr/**'
      - 'Helm/statuspage_pr/**'
jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Install AWS CLI
      run: |
        # Update apt package lists
        sudo apt-get update
        set -e 

        # Install AWS CLI
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        aws --version

    - name: Configure AWS Credentials
      run: |
        aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
        aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        aws configure set default.region "${{ secrets.AWS_DEFAULT_REGION }}"
        aws sts get-caller-identity 

    - name: Set up Infracost
      uses: infracost/actions/setup@v1
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}

    - name: Calculate Infracost Estimate for Production
      run: |
        for dir in access_entries bastion efs eks rds security_groups vpc; do
          echo "Processing $dir..."
          cd terraform/production/infrastructure/$dir
          terraform init
          terraform plan -out=tfplan
          infracost breakdown --path . --format json --out-file /tmp/infracost-$dir.json
          cd - > /dev/null
        done

    - name: Display Infracost Estimates
      run: |
        for dir in access_entries bastion efs eks rds security_groups vpc; do
          echo "Cost estimate for $dir:"
          infracost output --path /tmp/infracost-$dir.json
        done

    - name: Set Up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: latest

    - name: Check Terraform version
      run: terraform version

    - name: Create terraform.tfvars file
      run: |
        cat <<EOF > terraform/statuspage_pr/terraform.tfvars
        aws_access_key = "${{ secrets.AWS_ACCESS_KEY_ID }}"
        aws_secret_key = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        aws_region     = "${{ secrets.AWS_DEFAULT_REGION }}"
        EOF

    - name: Initialize Terraform
      run: cd ./terraform/statuspage_pr && terraform init

    - name: Plan Terraform
      run: |
        cd ./terraform/statuspage_pr
        terraform plan -out=tfplan 

    - name: Apply Terraform
      id: terraform_apply
      run: |
        cd ./terraform/statuspage_pr
        terraform apply -auto-approve -input=false tfplan

    - name: Get EFS ID anf Bastion Host IP
      run: |        

        EFS_ID=$(aws efs describe-file-systems --query "FileSystems[?Tags[?Key=='Name' && Value=='sm-efs-test']].FileSystemId | [0]" --output text | tr -d '\n' | tr -d '\r')
        if [ -z "$EFS_ID" ]; then
          echo "Error: EFS_ID is empty; no EFS found with tag Name=sm-efs-test"
          exit 1
        fi

        echo "EFS_ID=$EFS_ID" >> $GITHUB_ENV
        echo "Debug: EFS_ID=$EFS_ID"
      
        BASTION_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=sm-bastion-host" "Name=instance-state-name,Values=running" --query "Reservations[0].Instances[0].PublicIpAddress" --output text | tr -d '\n' | tr -d '\r')
        if [ -z "$BASTION_IP" ]; then
          echo "Error: BASTION_IP is empty; no instance found with tag Name=sm-bastion-host"
          exit 1
        fi

        echo "BASTION_IP=$BASTION_IP" >> $GITHUB_ENV
        echo "Debug: BASTION_IP=$BASTION_IP"

    - name: Install Docker
      run: |
        # Update package lists
        sudo apt-get update
        # Remove any conflicting packages (optional, to avoid conflicts)
        sudo apt-get remove -y containerd docker.io || true
        # Install prerequisites
        sudo apt-get install -y ca-certificates curl gnupg lsb-release
        # Add Dockerâ€™s official GPG key
        sudo mkdir -p /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        # Set up the Docker repository
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        # Update package lists again
        sudo apt-get update
        # Install Docker Engine
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        # Verify Docker is installed
        docker --version

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose-plugin
        docker compose version || { echo "Error: Docker Compose plugin installation failed"; exit 1; }

    - name: Build and Push Docker Images to ECR
      run: |
        set -e

        # Log in to AWS ECR
        aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin 992382545251.dkr.ecr.us-east-1.amazonaws.com
    
        # Navigate to docker directory and build images using docker-compose
        cd docker
        docker compose build
    
        # Tag the built images
        docker tag docker-nginx 992382545251.dkr.ecr.us-east-1.amazonaws.com/sm-statuspage-test-repo:nginx
        docker tag docker-django 992382545251.dkr.ecr.us-east-1.amazonaws.com/sm-statuspage-test-repo:django

    - name: Run Trivy on Nginx Image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'docker-nginx'
        format: 'table'
        exit-code: 0 
        severity: 'CRITICAL,HIGH'

    - name: Run Trivy on Django Image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'docker-django'
        format: 'table'
        exit-code: 0  
        severity: 'CRITICAL,HIGH'

    - name: Push Docker Images to ECR
      run: |
        docker push 992382545251.dkr.ecr.us-east-1.amazonaws.com/sm-statuspage-test-repo:nginx
        docker push 992382545251.dkr.ecr.us-east-1.amazonaws.com/sm-statuspage-test-repo:django

    - name: Install SSH Client
      run: sudo apt-get install -y openssh-client  # Installs the SSH client for remote access

    - name: Set Up SSH Key
      run: |
        echo "${{ secrets.BASTION_SSH_KEY }}" > bastion_key.pem  # Writes the SSH private key from secrets to a file
        chmod 600 bastion_key.pem  # Sets restrictive permissions on the key file

    - name: Copy Helm Charts to Bastion
      run: |
        # Remove existing helm-charts directory on bastion to avoid old file leftovers
        ssh -i bastion_key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@${{ env.BASTION_IP }} "rm -rf /home/ubuntu/helm-charts"
        # Copy the latest Helm charts
        scp -i bastion_key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -r ./Helm/production ubuntu@${{ env.BASTION_IP }}:/home/ubuntu/helm-charts/test
        
    - name: Update and Install Helm Charts via Bastion
      id: helm_install
      run: |
        ssh -i bastion_key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@${{ env.BASTION_IP }} << 'EOF'
        cd /home/ubuntu/helm-charts/test

        kubectl create namespace development --dry-run=client -o yaml | kubectl apply -f -
        
        helm install redis ./redis-stack -n development --set redis.replicas=1 --set storageclass.name=ebs-sc-test --set namespace=development

        helm install efs ./efs-sc-stack -n development \
          --set namespace=development \
          --set efs.name=efs-sc-test \
          --set efs.fileSystemId=$EFS_ID
        
        helm install status-page ./status-page-stack -n development \
          --set namespace=development \
          --set django.image.repository=992382545251.dkr.ecr.us-east-1.amazonaws.com/sm-statuspage-test-repo \
          --set django.env.DATABASE_HOST=sm-statuspage-test-db.cx248m4we6k7.us-east-1.rds.amazonaws.com \
          --set django.replicas=1 \
          --set nginx.image.repository=992382545251.dkr.ecr.us-east-1.amazonaws.com/sm-statuspage-test-repo \
          --set nginx.replicas=1 \
          --set pvc.storageClassName=efs-sc-test \
          --set ingress.host=test.sm-status-page.com

        sleep 30 
        ALB_HOSTNAME=$(kubectl get ingress -n production status-page-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "ALB_HOSTNAME=$ALB_HOSTNAME" > /home/ubuntu/alb_hostname.txt
        EOF

    - name: Fetch ALB Hostname from Bastion
      run: |
        scp -i bastion_key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ubuntu@${{ env.BASTION_IP }}:/home/ubuntu/alb_hostname.txt ./alb_hostname.txt
        ALB_HOSTNAME=$(cat ./alb_hostname.txt | grep ALB_HOSTNAME | cut -d'=' -f2)
        echo "ALB_HOSTNAME=$ALB_HOSTNAME" >> $GITHUB_ENV

    - name: Add A Record (Alias) to Route 53
      id: route53_add
      run: |
        # Create the JSON file with proper formatting
        cat <<EOF > dns-record.json
        {
          "Comment": "Adding statuspage A record with alias",
          "Changes": [
            {
              "Action": "UPSERT",
              "ResourceRecordSet": {
                "Name": "${{ secrets.HOSTED_ZONE_NAME }}",
                "Type": "A",
                "AliasTarget": {
                  "HostedZoneId": "Z35SXDOTRQ7X7K",
                  "DNSName": "dualstack.${{ env.ALB_HOSTNAME }}",
                  "EvaluateTargetHealth": true
                }
              }
            }
          ]
        }
        EOF

        # Debug: Show the generated JSON
        echo "Debug: Generated dns-record.json:"
        cat dns-record.json

        # Apply the Route 53 change
        aws route53 change-resource-record-sets --hosted-zone-id ${{ secrets.HOSTED_ZONE_ID }} --change-batch file://dns-record.json
        
    - name: Test connectivity to subpaths
      env:
        USERNAME: ${{ secrets.TEST_USERNAME }}
        PASSWORD: ${{ secrets.TEST_PASSWORD }}
      run: |
        echo "Waiting for environment to stabilize..." 
        sleep 180 
      
        # Run the test script and capture output
        echo "Running connectivity tests..."
        if python tests/test-connectivity.py; then
          echo "Success: All connectivity tests passed!"
        else
          echo "Error: Connectivity tests failed!"
          exit 1
        fi
        

    - name: Remove A Record (Alias) from Route 53
      if: always() && steps.route53_add.outcome == 'success' && env.ALB_HOSTNAME != ''
      run: |
        cat <<EOF > dns-record.json
        {
          "Comment": "Removing statuspage A record",
          "Changes": [
            {
              "Action": "DELETE",
              "ResourceRecordSet": {
                "Name": "${{ secrets.HOSTED_ZONE_NAME }}",
                "Type": "A",
                "AliasTarget": {
                  "HostedZoneId": "Z35SXDOTRQ7X7K",
                  "DNSName": "dualstack.${{ env.ALB_HOSTNAME }}",
                  "EvaluateTargetHealth": true
                }
              }
            }
          ]
        }
        EOF
    
        # Debug: Show the generated JSON
        echo "Debug: Generated dns-record.json for removal:"
        cat dns-record.json
    
        # Apply the Route 53 change
        aws route53 change-resource-record-sets --hosted-zone-id ${{ secrets.HOSTED_ZONE_ID }} --change-batch file://dns-record.json || true
        
    - name: Uninstall Helm Stacks via Bastion
      if: always() && steps.helm_install.outcome == 'success'
      run: |
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i bastion_key.pem ubuntu@${{ env.BASTION_IP }} << 'EOF'
          helm uninstall redis -n development
          helm uninstall efs -n development
          helm uninstall status-page -n development
          kubectl delete pvc redis-data-redis-0 -n development
        EOF
        
    - name: Destroy Terraform
      if: always() && steps.terraform_apply.outcome == 'success'
      run: |
        cd ./terraform/statuspage_pr
        terraform destroy -auto-approve -input=false 

    - name: Generate Summary
      run: |
        echo "## CI Summary" > summary.md
        echo "### Infracost Report" >> summary.md
        cat /tmp/infracost.json >> summary.md

    - name: Set up Git user
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Create Pull Request with CI results
      uses: peter-evans/create-pull-request@v5
      with:
        branch: ci-results
        title: "CI Results for Review"
        body: "This PR contains CI results including Infracost analysis. Please review and approve to trigger the CD pipeline."
        base: main
        delete-branch: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # - name: Trigger CD
    #   run: |
    #     curl -X POST \
    #     -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
    #     -H "Accept: application/vnd.github.v3+json" \
    #     -d '{"ref":"main"}' \
    #     https://api.github.com/repos/${{ github.repository }}/actions/workflows/status-page-cd.yml/dispatches
