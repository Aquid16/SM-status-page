name: Status Page CI Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - Development
    paths:
      - 'terraform/statuspage_pr/**'
jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Set Up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: latest

    - name: Check Terraform version
      run: terraform version

    - name: Create terraform.tfvars file
      run: |
        cat <<EOF > terraform/statuspage_pr/terraform.tfvars
        aws_access_key = "${{ secrets.AWS_ACCESS_KEY_ID }}"
        aws_secret_key = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        aws_region     = "${{ secrets.AWS_DEFAULT_REGION }}"
        EOF

    - name: Initialize Terraform
      run: cd ./terraform/statuspage_pr && terraform init

    - name: Plan Terraform
      run: |
        cd ./terraform/statuspage_pr
        terraform plan -out=tfplan 

    - name: Apply Terraform
      run: |
        cd ./terraform/statuspage_pr
        terraform apply -auto-approve -input=false 

    - name: Get Terraform Outputs
      id: terraform_outputs
      run: |
        echo "RDS_ENDPOINT=$(terraform -chdir=./terraform/statuspage_pr output -raw rds_endpoint)" >> $GITHUB_ENV
        echo "EFS_FILESYSTEM_ID=$(terraform -chdir=./terraform/statuspage_pr output -raw efs_filesystem_id)" >> $GITHUB_ENV


    - name: Install AWS CLI & kubectl
      run: |
        sudo apt-get update
        sudo apt-get install -y awscli
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Configure kubeconfig
      run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

    - name: Update statuspage values.yaml
      run: |
        sed -i "s|DATABASE_HOST:.*|DATABASE_HOST: ${RDS_ENDPOINT}|" ./Helm/statuspage_pr/status-page-stack/values.yaml

    - name: Update efs-stack values.yaml
      run: |
        sed -i "s|EFS_FILE_SYSTEM_ID:.*|fileSystemId: ${EFS_FILESYSTEM_ID}|" ./Helm/statuspage_pr/efs-sc-stack/values.yaml

    - name: Create namespace if not exists
      run: kubectl create namespace development --dry-run=client -o yaml | kubectl apply -f -

    - name: Install Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    - name: Install EFS Helm Stack
      run: helm install efs ./Helm/statuspage_pr/efs-stack -n development

    - name: Install Redis Helm Stack
      run: helm install redis ./Helm/statuspage_pr/redis-stack -n development

    - name: Install Status-Page Helm Stack
      run: helm install status-page ./Helm/statuspage_pr/status-page-stack -n development
    - name: Run Tests (Optional)
      run: |
        # Example: Check if deployments are running
        #kubectl get pods -n development

    - name: Test connectivity to subpaths
      env:
        USERNAME: ${{ secrets.TEST_USERNAME }}
        PASSWORD: ${{ secrets.TEST_PASSWORD }}
      run: |
        echo "Waiting for environment to stabilize..." \
        sleep 30 \
        chmod +x test/test-connectivity.sh \
        ./test/test-connectivity.sh 

    - name: Uninstall Helm Stacks
      run: |
        helm uninstall efs -n development
        helm uninstall status-page -n development
        helm uninstall redis -n development

    - name: Destroy Terraform
      run: |
        cd ./terraform/statuspage_pr
        terraform destroy -auto-approve -input=false 

    # - name: Trigger CD
    #   run: |
    #     curl -X POST \
    #     -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
    #     -H "Accept: application/vnd.github.v3+json" \
    #     -d '{"ref":"main"}' \
    #     https://api.github.com/repos/${{ github.repository }}/actions/workflows/status-page-cd.yml/dispatches
