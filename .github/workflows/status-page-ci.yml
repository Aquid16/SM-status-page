name: Status Page CI Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - Development
    paths:
      - 'docker/**'
jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Set Up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: latest

    - name: Check Terraform version
      run: terraform version

    - name: Create terraform.tfvars file
      run: |
        cat <<EOF > terraform/statuspage_pr/terraform.tfvars
        aws_access_key = "${{ secrets.AWS_ACCESS_KEY_ID }}"
        aws_secret_key = "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        aws_region     = "${{ secrets.AWS_DEFAULT_REGION }}"
        EOF

    - name: Initialize Terraform
      run: cd ./terraform/statuspage_pr && terraform init

    - name: Plan Terraform
      run: |
        cd ./terraform/statuspage_pr
        terraform plan -out=tfplan 

    - name: Apply Terraform
      run: |
        cd ./terraform/statuspage_pr
        terraform apply -auto-approve -input=false tfplan

    - name: Get Terraform Outputs
      run: |
        cd ./terraform/statuspage_pr
        RDS_ENDPOINT=$(terraform output -raw rds_endpoint | tr -d '\n' | tr -d '\r') || { echo "Error: rds_endpoint output not found"; exit 1; }
        EFS_FILESYSTEM_ID=$(terraform output -raw efs_filesystem_id | tr -d '\n' | tr -d '\r') || { echo "Error: efs_filesystem_id output not found"; exit 1; }
        BASTION_IP=$(terraform output -raw bastion_public_ip | tr -d '\n' | tr -d '\r') || { echo "Error: bastion_public_ip output not found"; exit 1; }
    
        echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV
        echo "EFS_FILESYSTEM_ID=$EFS_FILESYSTEM_ID" >> $GITHUB_ENV
        echo "BASTION_IP=${BASTION_IP}" >> $GITHUB_ENV

    - name: Install AWS CLI
      run: |
        # Update apt package lists
        sudo apt-get update
        set -e 

        # Install AWS CLI
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --update
        aws --version

    - name: Configure AWS Credentials
      run: |
        aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
        aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        aws configure set default.region "${{ secrets.AWS_DEFAULT_REGION }}"
        aws sts get-caller-identity 

    - name: Install Docker
      run: |
        # Update package lists
        sudo apt-get update
        # Remove any conflicting packages (optional, to avoid conflicts)
        sudo apt-get remove -y containerd docker.io || true
        # Install prerequisites
        sudo apt-get install -y ca-certificates curl gnupg lsb-release
        # Add Dockerâ€™s official GPG key
        sudo mkdir -p /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        # Set up the Docker repository
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        # Update package lists again
        sudo apt-get update
        # Install Docker Engine
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        # Verify Docker is installed
        docker --version

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose-plugin
        docker compose version || { echo "Error: Docker Compose plugin installation failed"; exit 1; }

    - name: Build and Push Docker Images to ECR
      run: |
        set -e
        aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin 992382545251.dkr.ecr.us-east-1.amazonaws.com
        cd docker
        docker compose build
        docker tag docker-nginx 992382545251.dkr.ecr.us-east-1.amazonaws.com/sm-statuspage-test-repo:nginx
        docker tag docker-django 992382545251.dkr.ecr.us-east-1.amazonaws.com/sm-statuspage-test-repo:django
        docker push 992382545251.dkr.ecr.us-east-1.amazonaws.com/sm-statuspage-test-repo:nginx
        docker push 992382545251.dkr.ecr.us-east-1.amazonaws.com/sm-statuspage-test-repo:django

    - name: Install SSH Client
      run: sudo apt-get install -y openssh-client  # Installs the SSH client for remote access

    - name: Set Up SSH Key
      run: |
        echo "${{ secrets.BASTION_SSH_KEY }}" > bastion_key.pem  # Writes the SSH private key from secrets to a file
        chmod 600 bastion_key.pem  # Sets restrictive permissions on the key file

    - name: Copy Helm Charts to Bastion
      run: |
        scp -i bastion_key.pem -r ./Helm/statuspage_pr ubuntu@${{ env.BASTION_IP }}:/home/ubuntu/helm-charts  # Copies Helm charts to the bastion

    - name: Update and Install Helm Charts via Bastion
      run: |
        ssh -i bastion_key.pem ubuntu@${{ env.BASTION_IP }} << 'EOF'
          sudo apt-get update  # Updates package lists on the bastion
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash  # Installs Helm on the bastion
          cd /home/ubuntu/helm-charts

          # Updates the EFS filesystem ID in efs-sc-stack values.yaml
          sed -i "s|fileSystemId:.*|fileSystemId: ${{ env.EFS_FILESYSTEM_ID }}|" ./efs-sc-stack/values.yaml

          # Updates the RDS endpoint in status-page-stack values.yaml
          sed -i "s|DATABASE_HOST:.*|DATABASE_HOST: ${{ env.RDS_ENDPOINT }}|" ./status-page-stack/values.yaml

          # Creates the development namespace if it doesn't exist
          kubectl create namespace development --dry-run=client -o yaml | kubectl apply -f -

          # Installs the Helm charts
          helm install redis ./redis-stack -n development
          helm install efs ./efs-sc-stack -n development
          helm install status-page ./status-page-stack -n development

          # Retrieves the ALB hostname from the ingress
          ALB_HOSTNAME=$(kubectl get ingress -n development statuspage-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "ALB_HOSTNAME=$ALB_HOSTNAME" > /home/ubuntu/alb_hostname.txt
        EOF

    - name: Fetch ALB Hostname from Bastion
      run: |
        scp -i bastion_key.pem ubuntu@${{ env.BASTION_IP }}:/home/ubuntu/alb_hostname.txt ./alb_hostname.txt  # Copies the ALB hostname file back to the runner
        ALB_HOSTNAME=$(cat ./alb_hostname.txt | grep ALB_HOSTNAME | cut -d'=' -f2)  # Extracts the hostname
        echo "ALB_HOSTNAME=$ALB_HOSTNAME" >> $GITHUB_ENV  # Adds it to environment variables

    - name: Add A Record (Alias) to Route 53
      run: |
        cat <<EOF > dns-record.json
        {
          "Comment": "Adding statuspage A record with alias",
          "Changes": [{
            "Action": "UPSERT",
            "ResourceRecordSet": {
              "Name": ${{ secrets.HOSTED_ZONE_NAME }},
              "Type": "A",
              "AliasTarget": {
                "HostedZoneId": ${{ secrets.HOSTED_ZONE_ID }},
                "DNSName": "$ALB_HOSTNAME",
                "EvaluateTargetHealth": false
              }
            }
          }]
        }
        EOF
        aws route53 change-resource-record-sets --hosted-zone-id ${{ secrets.HOSTED_ZONE_ID }} --change-batch file://dns-record.json

    - name: Test connectivity to subpaths
      env:
        USERNAME: ${{ secrets.TEST_USERNAME }}
        PASSWORD: ${{ secrets.TEST_PASSWORD }}
      run: |
        echo "Waiting for environment to stabilize..." \
        sleep 180 \
        chmod +x test/test-connectivity.sh \
        ./test/test-connectivity.sh 

    - name: Remove A Record (Alias) from Route 53
      run: |
        cat <<EOF > dns-record.json
        {
          "Comment": "Removing statuspage A record",
          "Changes": [{
            "Action": "DELETE",
            "ResourceRecordSet": {
              "Name": ${{ secrets.HOSTED_ZONE_NAME }},
              "Type": "A",
              "AliasTarget": {
                "HostedZoneId": ${{ secrets.HOSTED_ZONE_ID }},
                "DNSName": "$ALB_HOSTNAME",
                "EvaluateTargetHealth": false
              }
            }
          }]
        }
        EOF
        aws route53 change-resource-record-sets --hosted-zone-id ${{ secrets.HOSTED_ZONE_ID }} --change-batch file://dns-record.json

    - name: Uninstall Helm Stacks via Bastion
      run: |
        ssh -i bastion_key.pem ubuntu@${{ env.BASTION_IP }} << 'EOF'
          helm uninstall efs -n development
          helm uninstall redis -n development
          helm uninstall status-page -n development  # Uninstalls all Helm releases
        EOF
        
    - name: Destroy Terraform
      run: |
        cd ./terraform/statuspage_pr
        terraform destroy -auto-approve -input=false 

    # - name: Trigger CD
    #   run: |
    #     curl -X POST \
    #     -H "Authorization: Bearer ${{ secrets.GH_TOKEN }}" \
    #     -H "Accept: application/vnd.github.v3+json" \
    #     -d '{"ref":"main"}' \
    #     https://api.github.com/repos/${{ github.repository }}/actions/workflows/status-page-cd.yml/dispatches
